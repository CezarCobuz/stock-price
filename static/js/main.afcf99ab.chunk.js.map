{"version":3,"sources":["date-interval/dropdown.tsx","ui/spacing.component.tsx","date-interval/date-interval.tsx","input/input.tsx","utils/dimensions.utils.ts","chart/chart.tsx","utils/general.utils.ts","chart/chart.state.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DropdownState","observable","action","value","valueIndex","Dropdown","observer","state","dates","className","id","onChange","e","target","selectedIndex","map","date","key","getCustomClassNames","top","bottom","vertical","left","right","horizontal","result","SpacingComponent","props","children","DateIntervalState","stockData","startDates","eachStockData","endDates","indexStart","indexStop","appState","startIndex","endIndex","console","warn","DateInterval","useEffect","filterDates","chartState","startDropdownState","stopDropdownState","onClick","setDateInterval","InputState","newValue","this","Input","getWindowDimensions","window","width","innerWidth","height","innerHeight","Chart","slice","averagePrice","price","reduce","a","b","length","computeAveragePrice","useState","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","userInputState","fetchStock","data","dataKey","stroke","strokeDasharray","type","y","toFixed","position","fill","fontWeight","ChartState","config","stockSymbol","outputSize","stockFunction","fetch","createAlphaVantageRequestInfo","then","res","json","converted","timeSeries","Object","keys","forEach","item","parseFloat","push","reverse","convertTimeSeries","App","dateIntervalState","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.afcf99ab.chunk.js","sourcesContent":["import './dropdown.css';\r\n\r\nimport { action, observable } from 'mobx'\r\n\r\nimport React from 'react'\r\nimport { observer } from 'mobx-react'\r\n\r\nexport class DropdownState {\r\n    @observable\r\n    value: string = '';\r\n\r\n    @observable\r\n    valueIndex: number = 0\r\n\r\n    @action\r\n    onChange = (value: string, valueIndex: number) => {\r\n        this.value = value\r\n        this.valueIndex = valueIndex\r\n    }\r\n}\r\n\r\nexport const Dropdown: React.FC<{ state: DropdownState, dates: string[] }> = observer(({ state, dates }) => {\r\n    return (\r\n        <div>\r\n            <select className='Dropdown' id=\"date\"\r\n                onChange={e => state.onChange(e.target.value, e.target.selectedIndex)}\r\n                value={state.value}>\r\n                {\r\n                    dates.map((date) => (\r\n                        <option key={date} value={date}>\r\n                            {date}\r\n                        </option>\r\n                    ))\r\n                }\r\n            </select>\r\n        </div>\r\n    )\r\n})\r\n","import './spacing.component.css';\r\n\r\nimport React from 'react'\r\n\r\nconst getCustomClassNames = (\r\n    top?: boolean,\r\n    bottom?: boolean,\r\n    vertical?: boolean,\r\n    left?: boolean,\r\n    right?: boolean,\r\n    horizontal?: boolean,\r\n): string => {\r\n    let result = ''\r\n\r\n    if (vertical) {\r\n        result = 'SpacingComponent__top SpacingComponent__bottom '\r\n    }\r\n    if (bottom) {\r\n        result = 'SpacingComponent__bottom '\r\n    }\r\n    if (top) {\r\n        result = 'SpacingComponent__top '\r\n    }\r\n    if (horizontal) {\r\n        result += 'SpacingComponent__left SpacingComponent__right'\r\n    }\r\n    if (left) {\r\n        result += 'SpacingComponent__left'\r\n    }\r\n    if (right) {\r\n        result += 'SpacingComponent__right'\r\n    }\r\n\r\n    return result\r\n}\r\ninterface Props {\r\n    children: React.ReactNode,\r\n    top?: boolean,\r\n    bottom?: boolean,\r\n    vertical?: boolean,\r\n    left?: boolean,\r\n    right?: boolean,\r\n    horizontal?: boolean,\r\n}\r\n\r\nexport const SpacingComponent: React.FC<Props> = (props: Props) => {\r\n    return (\r\n        <div className={\r\n            getCustomClassNames(\r\n                props.top,\r\n                props.bottom,\r\n                props.vertical,\r\n                props.left,\r\n                props.right,\r\n                props.horizontal\r\n            )}>\r\n\r\n            {props.children}\r\n\r\n        </div>\r\n    )\r\n}","import './date-interval.css'\r\nimport '../ui/button.css'\r\n\r\nimport { Dropdown, DropdownState } from './dropdown';\r\nimport React, { useEffect } from 'react'\r\nimport { action, observable } from 'mobx'\r\n\r\nimport { EasyTimeSeries } from '../interfaces/general.interfaces';\r\nimport { SpacingComponent } from '../ui/spacing.component';\r\nimport { appState } from '../App';\r\nimport { observer } from 'mobx-react'\r\n\r\nexport class DateIntervalState {\r\n    @observable\r\n    startDates = [] as string[]\r\n\r\n    @observable\r\n    endDates = [] as string[]\r\n\r\n    @observable\r\n    startDropdownState = new DropdownState();\r\n\r\n    @observable\r\n    stopDropdownState = new DropdownState();\r\n\r\n    @action\r\n    filterDates = (stockData: EasyTimeSeries[]) => {\r\n        this.startDates = stockData.map(eachStockData => eachStockData.date)\r\n\r\n        // TODO: only display dates after start\r\n        this.endDates = stockData.map(eachStockData => eachStockData.date)\r\n    }\r\n\r\n    @action\r\n    setDateInterval = (indexStart: number, indexStop: number) => {\r\n        if (indexStart < indexStop) {\r\n            appState.startIndex = indexStart\r\n            appState.endIndex = indexStop\r\n        } else {\r\n            // TODO: Add a pretty warning component\r\n            console.warn('Index of start date must be smaller then index of stop date')\r\n        }\r\n    }\r\n}\r\n\r\nexport const DateInterval: React.FC<{ state: DateIntervalState }> = observer(({ state }) => {\r\n\r\n    useEffect(() => {\r\n        state.filterDates(appState.chartState.stockData)\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    let { startDropdownState, stopDropdownState, startDates, endDates } = state\r\n\r\n    return (\r\n        <>\r\n            <SpacingComponent vertical>\r\n                <div className='DatesSelectorsContainer'>\r\n                    <Dropdown state={startDropdownState} dates={startDates} />\r\n                    <SpacingComponent left>\r\n                        <Dropdown state={stopDropdownState} dates={endDates} />\r\n                    </SpacingComponent>\r\n                </div>\r\n\r\n            </SpacingComponent>\r\n\r\n\r\n            <button\r\n                className='Button'\r\n                onClick={() => state.setDateInterval(startDropdownState.valueIndex, stopDropdownState.valueIndex)}>\r\n                Filter Date Interval\r\n            </button>\r\n        </>\r\n    )\r\n})","import './input.css'\r\n\r\nimport { action, observable } from \"mobx\";\r\n\r\nimport React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nexport class InputState {\r\n    @observable\r\n    value: string = \"\";\r\n\r\n    @action\r\n    onChange(newValue: string) {\r\n        this.value = newValue;\r\n    }\r\n}\r\n\r\nexport const Input: React.FC<{ state: InputState }> = observer(({ state }) => {\r\n    return (\r\n        <input\r\n            className='Input'\r\n            value={state.value}\r\n            onChange={(e) => state.onChange(e.target.value)}\r\n        />\r\n    );\r\n});\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst getWindowDimensions = () => {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\n\r\nexport const useWindowDimensions = () => {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}","import './chart.css';\r\n\r\nimport { CartesianGrid, Label, Line, LineChart, ReferenceLine, Tooltip, XAxis, YAxis } from 'recharts'\r\n\r\nimport { ChartState } from './chart.state'\r\nimport { Input } from '../input/input'\r\nimport React from 'react'\r\nimport { SpacingComponent } from '../ui/spacing.component'\r\nimport { computeAveragePrice } from '../utils/general.utils'\r\nimport { observer } from 'mobx-react'\r\nimport { useWindowDimensions } from '../utils/dimensions.utils';\r\n\r\ninterface Props {\r\n    state: ChartState,\r\n    startIndex?: number,\r\n    endIndex?: number\r\n}\r\n\r\n/**\r\n * User provides a stock symbol\r\n * The price of the stock plotted on a chart\r\n * Customizable time period shown in the chart\r\n * Overlay an average on the chart\r\n *\r\n * examples and documentation: http://recharts.org/en-US/examples\r\n */\r\nexport const Chart: React.FC<Props> = observer(({ state, startIndex = 0, endIndex = 0 }) => {\r\n\r\n    let stockData = state.stockData\r\n\r\n    if (startIndex || endIndex) {\r\n        stockData = stockData.slice(startIndex, endIndex)\r\n    }\r\n\r\n    let averagePrice = computeAveragePrice(stockData)\r\n\r\n    const {height, width} = useWindowDimensions()\r\n\r\n    return (\r\n        <div className='Chart'>\r\n\r\n            <SpacingComponent bottom>\r\n                <div className='SymbolContainer'>\r\n                    <Input state={state.userInputState} />\r\n                    <SpacingComponent left>\r\n                        <button className='Button' onClick={() => state.fetchStock()}>Fetch Stock Data</button>\r\n                    </SpacingComponent>\r\n                </div>\r\n            </SpacingComponent>\r\n\r\n            {stockData.length !== 0 &&\r\n                <LineChart width={width * 0.8} height={height * 0.5} data={stockData}>\r\n                    <XAxis dataKey='date' />\r\n                    <YAxis dataKey='price' />\r\n                    <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\r\n                    <Line type=\"monotone\" dataKey=\"price\" stroke=\"darkcyan\" />\r\n                    <Tooltip />\r\n                    <ReferenceLine y={averagePrice} stroke=\"sandybrown\" strokeDasharray='5 10'>\r\n                        <Label value={`avg: ${averagePrice.toFixed(4)}`} position='insideLeft' fill='coral' fontWeight='bold' />\r\n                    </ReferenceLine>\r\n                    {/* TODO: investigate xAxis tick formatter https://github.com/recharts/recharts/issues/1028 */}\r\n                </LineChart>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n","import {\r\n    AlphaVantageConfig,\r\n    EasyTimeSeries,\r\n} from \"../interfaces/general.interfaces\";\r\n\r\n/** @param data as received from alphavantage API  */\r\nexport const convertTimeSeries = (data: any): EasyTimeSeries[] => {\r\n    let result: EasyTimeSeries[] = [];\r\n\r\n    // FIXME: Do a smarter access of the Time Series field\r\n    //   console.log(\"+++ data to be filtered\", data[\"Time Series (5min)\"]);\r\n    //   const timeSeries = data[\"Time Series (5min)\"];\r\n\r\n    const timeSeries = data[\"Monthly Time Series\"];\r\n\r\n    Object.keys(timeSeries).forEach((date) => {\r\n        let item: EasyTimeSeries = {\r\n            date: date,\r\n            price: parseFloat(timeSeries[date][\"1. open\"]),\r\n        };\r\n\r\n        result.push(item);\r\n    });\r\n\r\n    return result.reverse();\r\n};\r\n\r\nexport const createAlphaVantageRequestInfo = (\r\n    config: AlphaVantageConfig\r\n): string => {\r\n    const PROVIDER = \"https://www.alphavantage.co/\";\r\n    const API_KEY = \"KSNP9BPJV1U322DK\"; // devbackup: J4Z86NMG30HH5AJ3 //TODO: cycle through this APIS\r\n\r\n    const { outputSize, stockSymbol, stockFunction } = config;\r\n\r\n    const REQUEST_INFO = `${PROVIDER}query?function=${stockFunction}&symbol=${stockSymbol}&interval=5min&outputsize=${outputSize}&apikey=${API_KEY}`;\r\n\r\n    return REQUEST_INFO;\r\n};\r\n\r\nexport const computeAveragePrice = (stockData: EasyTimeSeries[]): number => {\r\n\r\n    let prices = stockData.map((value) => value.price)\r\n    let sum = prices.reduce((a, b) => a + b, 0)\r\n    let average = sum / stockData.length\r\n\r\n    return average\r\n}\r\n","import { observable, action } from \"mobx\";\r\nimport { InputState } from \"../input/input\";\r\nimport {\r\n    convertTimeSeries,\r\n    createAlphaVantageRequestInfo,\r\n} from \"../utils/general.utils\";\r\nimport {\r\n    EasyTimeSeries,\r\n    AlphaVantageConfig,\r\n} from \"../interfaces/general.interfaces\";\r\n\r\nexport class ChartState {\r\n    @observable\r\n    userInputState = new InputState();\r\n\r\n    @observable\r\n    stockData = [] as EasyTimeSeries[];\r\n\r\n    @action\r\n    fetchStock() {\r\n        let config: AlphaVantageConfig = {\r\n            stockSymbol: this.userInputState.value,\r\n            // TODO: get from user\r\n            outputSize: \"compact\", // full\r\n            stockFunction: \"TIME_SERIES_MONTHLY\", // TIME_SERIES_INTRADAY\r\n        };\r\n\r\n        // <!> Limits to: 5 API requests per minute; 500 API requests per day\r\n        // https://www.alphavantage.co/premium/\r\n        fetch(createAlphaVantageRequestInfo(config))\r\n            .then((res) => {\r\n                return res.json();\r\n            })\r\n            .then((data) => {\r\n                if (data[\"Error Message\"]) {\r\n                    console.warn(\"<!> Error\");\r\n                } else {\r\n                    let converted: EasyTimeSeries[] = convertTimeSeries(data);\r\n                    this.stockData = converted;\r\n                }\r\n            });\r\n    }\r\n}\r\n","import './App.css';\r\nimport './ui/button.css';\r\n\r\nimport { DateInterval, DateIntervalState } from './date-interval/date-interval';\r\nimport React, { useEffect } from 'react';\r\n\r\nimport { Chart } from './chart/chart';\r\nimport { ChartState } from './chart/chart.state';\r\nimport { SpacingComponent } from './ui/spacing.component';\r\nimport { observable } from 'mobx';\r\nimport { observer } from 'mobx-react'\r\n\r\nclass AppState {\r\n    @observable\r\n    chartState = new ChartState()\r\n\r\n    @observable\r\n    dateIntervalState = new DateIntervalState()\r\n\r\n    @observable\r\n    startIndex = 0\r\n\r\n    @observable\r\n    endIndex = 0\r\n}\r\n\r\nexport const appState = new AppState()\r\n\r\nexport const App: React.FC<{ state: AppState }> = observer(({ state }) => {\r\n\r\n    // Default value\r\n    useEffect(() => {\r\n        state.chartState.userInputState.value = 'amzn'\r\n        state.chartState.fetchStock()\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    return (\r\n        <div className='App'>\r\n            <SpacingComponent top>\r\n                <Chart state={state.chartState} startIndex={state.startIndex} endIndex={state.endIndex} />\r\n            </SpacingComponent>\r\n\r\n            {\r\n                state.chartState.stockData.length !== 0 && <DateInterval state={state.dateIntervalState} />\r\n            }\r\n\r\n            {/* TODO: infoBoxComponent with bellow */}\r\n            {/* <p>Date interval selected {state.dateIntervalState.startDropdownState.value} -> {state.dateIntervalState.stopDropdownState.value}</p>\r\n            <p>Date interval index {state.dateIntervalState.startDropdownState.valueIndex} -> {state.dateIntervalState.stopDropdownState.valueIndex}</p>\r\n\r\n            <p>Filtered Data length {state.dateIntervalState.stopDropdownState.valueIndex - state.dateIntervalState.startDropdownState.valueIndex}</p> */}\r\n        </div>\r\n    )\r\n})\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App, appState} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App state={appState}/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}